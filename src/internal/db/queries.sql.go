// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token) VALUES (?, ?) RETURNING id
`

type CreateSessionParams struct {
	UserID int64
	Token  string
}

func (q *Queries) CreateSession(ctx context.Context, db DBTX, arg CreateSessionParams) (int64, error) {
	row := db.QueryRowContext(ctx, createSession, arg.UserID, arg.Token)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hash) VALUES (?, ?, ?) RETURNING id
`

type CreateUserParams struct {
	Name         string
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (int64, error) {
	row := db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.PasswordHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, name, email, password_hash, created_at FROM users WHERE email = ? AND password_hash = ? LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, db DBTX, arg GetUserByEmailAndPasswordParams) (User, error) {
	row := db.QueryRowContext(ctx, getUserByEmailAndPassword, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const joinSessionByUserId = `-- name: JoinSessionByUserId :one
SELECT sessions.id, user_id, token, sessions.created_at, users.id, name, email, password_hash, users.created_at FROM sessions JOIN users ON sessions.user_id = users.id WHERE sessions.token = ? LIMIT 1
`

type JoinSessionByUserIdRow struct {
	ID           int64
	UserID       int64
	Token        string
	CreatedAt    time.Time
	ID_2         int64
	Name         string
	Email        string
	PasswordHash string
	CreatedAt_2  time.Time
}

func (q *Queries) JoinSessionByUserId(ctx context.Context, db DBTX, token string) (JoinSessionByUserIdRow, error) {
	row := db.QueryRowContext(ctx, joinSessionByUserId, token)
	var i JoinSessionByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ID_2,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt_2,
	)
	return i, err
}

const ping = `-- name: Ping :one

SELECT 1
`

// SQLite3 queries.
// All queries should be idempotent.
func (q *Queries) Ping(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, ping)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
